@page "/admin/deposito/crear"

<PageTitle>Crear Deposito</PageTitle>

@using ControllerLayer 

@inject Controller Controller 
@inject NavigationManager NavigationManager

<h1>Crear Deposito</h1>
<form>
    <div class="form-group m-2">
        <div class="form-group">
            <label for="title">Nombre</label>
            <input type="text" class="form-control" id="nombre" @bind="nombre" />
        </div>
        <label for="title">Area</label>
        <select class="form-select" name="area" id="Area" @bind="unaArea">
            <option selected>Seleccione un Area de Deposito</option>
            <option value="A">A</option>
            <option value="B">B</option>
            <option value="C">C</option>
            <option value="D">D</option>
            <option value="E">E</option>
        </select>
    </div>
    <div class="form-group m-2">
        <label for="title">Tamaño</label>
        <br />
        <select class="form-select" name="title" id="Tamanio" @bind="unTamanio">
            <option selected>Seleccione un Tamaño de Deposito</option>
            <option value="Pequenio">Pequeño</option>
            <option value="Mediano">Mediano</option>
            <option value="Grande">Grande</option>
        </select>
    </div>
    <div class="form-group m-2">
        <label for="disponibleDesde">Disponible desde:</label>
        <input type="date" class="form-control" id="disponibleDesde" @bind="disponibleDesde" />
    </div>
    <div class="form-group m-2">
        <label for="disponibleHasta">Disponible hasta:</label>
        <input type="date" placeholder = "today" class="form-control" id="disponibleHasta" @bind="disponibleHasta" />
    </div>
    <div class="form-group m-2">
        <label for="title">Climatizacion</label>
        <input type="checkbox" class="form-check-input" id="Climatizacion" @bind="unaClimatizacion"/>
    </div>
    <div class="form-group m2">
        <label class="m-2">Promociones</label>
        <br />
        @if (promociones != null) {
            @foreach (var promocion in promociones)
            {
                <div class="m-2">
                    <input class="form-check-input " type="checkbox" value="" id="Promocion" @bind="@promocionesSeleccionadas[promocion]">
                <label class="form-check-label " for="Promocion">
                    @promocion.Etiqueta
                </label>
            </div>
            }
        }
    </div>

    <button type="button" class="btn btn-primary m-2" @onclick="GuardarCambios">Guardar cambios</button>
</form>

@if (!datosCorrectos)
{
    <p class="text-danger">@mensajeError</p>
}

@code{
    private DTODeposito deposito;
    private string unaArea;
    private string unTamanio;
    private bool unaClimatizacion;
    private bool datosCorrectos = true;
    private string mensajeError;
    private string nombre;
    private DateTime disponibleDesde;
    private DateTime disponibleHasta;
    private List<DTOPromocion> promociones =null;
    private Dictionary<DTOPromocion, bool> promocionesSeleccionadas; 

    protected override void OnInitialized()
    {
        try
        {
            promociones = Controller.listarTodasLasPromociones().ToList();

            promocionesSeleccionadas = new Dictionary<DTOPromocion, bool>();
            foreach (var promocion in promociones)
            {
                promocionesSeleccionadas.Add(promocion, false);
            }
            disponibleDesde = DateTime.Today;
            disponibleHasta = disponibleDesde;
        }
        catch (DatabaseExceptionController e)
        {
            NavigationManager.NavigateTo("/ErrorBD");
        }


    }
    private void GuardarCambios()
    {
        try
        {

            deposito = new(nombre, unaArea, unTamanio, unaClimatizacion, disponibleDesde, disponibleHasta);
            int idDepositoReal = Controller.RegistrarDeposito(deposito);
            deposito.Id = idDepositoReal;
            foreach (var iter in promocionesSeleccionadas)
            {
                if (iter.Value == true)
                {
                    Controller.AgregarPromocionADeposito(iter.Key, deposito);
                }
            }
            NavigationManager.NavigateTo("/admin/deposito");
        }
        catch (ArgumentException e)
        {
            datosCorrectos = false;
            mensajeError = e.Message;
        }
        catch (DatabaseExceptionController e)
        {
            NavigationManager.NavigateTo("/ErrorBD");
        }
        catch (Exception e)
        {
            datosCorrectos = false;
            mensajeError = e.Message;
        }

    }
    
}


