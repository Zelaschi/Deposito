@page "/cliente/reserva/mostrar-depositos/{fechaDesde}/{fechaHasta}"

<PageTitle>Mostrar Depositos</PageTitle>

@using ControllerLayer

@inject DTOSesion DtoSesion
@inject Controller Controller
@inject NavigationManager NavigationManager
<p><a href="/cliente/reserva/seleccionar-fechas">Volver</a></p>
<h1>Depositos Disponibles</h1>
<form>
    @if (depositosDisponibles.Count >0 )
    {
        <div class="form-group m-2">

            <label for="Deposito">Depositos Disponibles</label>
            <select class="form-control" @bind="_idDepositoSeleccionado">
                <option disabled selected value="">Seleccionar Deposito</option>
                @foreach (var deposito in depositosDisponibles)
                {
                    <option value="@deposito.Id">@deposito.Id</option>
                }
            </select>
        </div>

        <button type="button" class="btn btn-primary m-2" @onclick="GuardarCambios">Guardar cambios</button>
    }
    else
    {
        <p>No hay depositos disponibles para esa fecha, vuelve a intentarlo</p>
    }
</form>

@if (!datosCorrectos)
{
    <p class="text-danger">@mensajeError</p>
}

@code {
    [Parameter] public string fechaDesde { get; set; }
    [Parameter] public string fechaHasta { get; set; }

    private DTOReserva reserva;
    private DTODeposito unDeposito;
    private DTOCliente unCliente;
    private DateTime unaFechaDesde;
    private DateTime unaFechaHasta;
    private List<DTODeposito> depositosDisponibles;
    private int _idDepositoSeleccionado;
    private string _mailClienteSeleccionado;
    private bool datosCorrectos = true;
    private string mensajeError;

    protected override void OnInitialized()
    {
        try
        {
            if (fechaDesde != null && fechaHasta != null)
            {
                unaFechaDesde = DateTime.Parse(fechaDesde);
                unaFechaHasta = DateTime.Parse(fechaHasta);
            }
            depositosDisponibles = Controller.DepositosDisponiblesParaReservaPorFecha(unaFechaDesde, unaFechaHasta).ToList();
        }
        catch (DatabaseExceptionController e)
        {
            NavigationManager.NavigateTo("/ErrorBD");
        }
        catch (Exception e)
        {
            datosCorrectos = false;
            mensajeError = e.Message;
        }

    }

    private void GuardarCambios()
    {
        try
        {
            unDeposito = Controller.BuscarDepositoPorId(_idDepositoSeleccionado);
            unCliente = Controller.buscarClientePorMail(DtoSesion.SesionMail);
            reserva = new DTOReserva(0, unaFechaDesde, unaFechaHasta, unDeposito, unCliente, 1);
            int idReservaReal = Controller.RegistrarReserva(reserva);
            reserva.Id = idReservaReal;
            NavigationManager.NavigateTo("/cliente/reserva");
        }
        catch (DatabaseExceptionController e)
        {
            NavigationManager.NavigateTo("/ErrorBD");
        }
        catch (Exception e)
        {
            datosCorrectos = false;
            mensajeError = e.Message;
        }
    }
}
