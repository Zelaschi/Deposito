@page "/admin/reserva/crear"

<PageTitle>Crear Reserva</PageTitle>

@using BusinessLogic
@using Domain
@using ControllerLayer

@inject Controller Controller
@inject NavigationManager NavigationManager

<h1>Crear Reserva</h1>
<form>
    <div class="form-group m-2">
        <label for="fechaDesde">Fecha Desde:</label>
        <input type="date" class="form-control" id="fechaDesde" @bind="unaFechaDesde"  />
    </div>
    <div class="form-group m-2">
        <label for="fechaHasta">Fecha Hasta:</label>
        <input type="date" placeholder="today" class="form-control" id="fechaHasta" @bind="unaFechaHasta"  />
    </div>
    <div class="form-group">
        <label for="Deposito">Depositos Disponibles</label>
        <select class="form-control" @bind="@_idDepositoSeleccionado" >
            <option diable selected value="">Seleccionar Deposito</option>
            @foreach(var deposito in depositosDisponibles)
            {
                <option value="@deposito.Id">@deposito.Id</option>
            }
        </select>
    </div>
    <div class="form-group">
        <label for="Cliente">Seleccionar cliente</label>
        <select class="form-control" @bind="@_mailClienteSeleccionado">
            <option diable selected value="">Seleccionar Cliente</option>
            @foreach (var cliente in clientesDisponibles)
            {
                <option value="@cliente.Mail">@cliente.NombreYApellido</option>
            }
        </select>
    </div>

    <button type="button" class="btn btn-primary m-2" @onclick="GuardarCambios">Guardar cambios</button>
</form>

@if (!datosCorrectos)
{
    <p class="text-danger">@mensajeError</p>
}

@code {
    private DTOReserva reserva;
    private DateTime _unaFechaDesde;
    private DateTime unaFechaDesde
    {
        get { return _unaFechaDesde; }
        set
        {
            MostrarDepositosDisponibles();
            _unaFechaDesde = value;
        }
    }
    private DateTime _unaFechaHasta;
    private DateTime unaFechaHasta
    {
        get { return _unaFechaHasta; }
        set
        {
            MostrarDepositosDisponibles();
            _unaFechaHasta = value;
        }
    }
    private DTODeposito unDeposito;
    private DTOCliente unCliente;
    private int precio;
    private DTOCliente cliente;
    private List<DTODeposito> depositosDisponibles;
    private List<DTOCliente> clientesDisponibles;
    private int _idDepositoSeleccionado;
    private string _mailClienteSeleccionado;
    private bool datosCorrectos = true;
    private string mensajeError;

    protected override void OnInitialized()
    {
        clientesDisponibles = Controller.listarTodosLosClientes().ToList();
        unaFechaDesde = DateTime.Today;
        unaFechaHasta = DateTime.Today;
    }
    private void MostrarDepositosDisponibles()
    {
        depositosDisponibles = Controller.DepositosDisponiblesParaReservaPorFecha(unaFechaDesde,unaFechaHasta).ToList();
    }

    private void GuardarCambios()
    {
        try
        {
            unDeposito = Controller.BuscarDepositoPorId(_idDepositoSeleccionado);
            unCliente = Controller.buscarClientePorMail(_mailClienteSeleccionado);
            reserva = new(1, unaFechaDesde, unaFechaHasta, unDeposito, unCliente, 1);
            int idReservaReal = Controller.RegistrarReserva(reserva);
            reserva.Id = idReservaReal;
            NavigationManager.NavigateTo("/admin/reserva");
        }
        catch (Exception e)
        {
            datosCorrectos = false;
            mensajeError = e.Message;
        }
    }

}
 