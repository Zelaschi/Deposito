@page "/admin/reserva"

<PageTitle>Crear Reserva</PageTitle>


@using ControllerLayer

@inject Controller Controller
@inject NavigationManager NavigationManager
<div class="d-flex flex-column min-vh-80">

    <div class="arriba">
        <h1>
            Lista Reservas
        </h1>
        <h1>
            <a href="/admin/reserva/seleccionar-fechas" class="btn btn-success btn-sm" style="float: right;margin-right: 40px;">Crear Reserva</a>
        </h1>


        <table class="table">
            <thead>
            <tr>
                <th>Id Reserva</th>
                <th>Fecha Desde</th>
                <th>Fecha Hasta</th>
                <th>Deposito</th>
                <th>Precio</th> 
                <th>Estado</th>
                <th>Cliente</th>
                <th>Acciones</th>
            </tr>
            </thead>
            <tbody>
                @if (reservasRegistradas != null) 
                { 
                    @foreach(var reserva in reservasRegistradas)
                    {
                        <tr>
                            <td>@reserva.Id</td>
                            <td>@reserva.FechaDesde.ToString("dd/MM/yyyy")</td>
                            <td>@reserva.FechaHasta.ToString("dd/MM/yyyy")</td>
                            <td>Nombre: @reserva.Deposito.Nombre Id: @reserva.Deposito.Id</td>
                            <td>@reserva.PrecioReserva</td>
                            <td>@reserva.Estado</td>
                            <td>@reserva.Cliente.NombreYApellido</td>
                            <td>
                                @if (reserva.Pago != null)
                                {
                                    @if (reserva.Pago.EstadoPago.Equals("Pendiente"))
                                    {
                                        <p>Pago pendiente</p>
                                    }
                                    else
                                    {
                                        @if (reserva.Estado == "Pendiente")
                                        {
                                            <button class="btn btn-success btn-sm" @onclick="(() => AceptarReserva(reserva))">Aceptar</button>
                                            <button class="btn btn-danger btn-sm" @onclick="(() => GuardarRechazo(reserva))">Rechazar</button>
                                            <textarea class="form-control" placeholder="Motivo rechazo" @bind="unaJustificacion" rows="1" cols="3"></textarea>
                                            @if (!datosCorrectos)
                                            {
                                                <p class="text-danger">@mensajeError</p>
                                            }
                                        }
                                    }
                                }
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>
    <div class="abajo">
        <div class="form-group m-2">
            <label for="title">Generar Reporte de reservas</label>
            <br />
            <select class="form-select" name="formato" id="Formato" @bind="unFormato">
                <option selected>Seleccione un formato</option>
                <option value="TXT">TXT</option>
                <option value="CSV">CSV</option>
            </select>
        </div>
        <button type="button" class="btn btn-primary m-2" @onclick="GenerarReporte">Generar Reporte</button>
        @if (reporteGenerado)
        {
            <p class="text-success">@mensajeReporteGenerado</p>
        }
        @if (!string.IsNullOrEmpty(mensajeErrorSinFormato))
        {
            <p class="text-danger">@mensajeErrorSinFormato</p>
        }
    </div>
</div>
<style>
    .arriba{
        flex:1;
    }
    .abajo {
        margin-top: 20px; 
        width: 33.33%;
        background-color: #f8f9fa; /* Fondo claro para distinguir el div */
        padding: 1rem;
        box-shadow: 0 -2px 10px rgba(0, 0, 0, 0.1);
    }
</style>


@code {
    private List<DTOReserva> reservasRegistradas = null;
    private bool reservaRechazada = false;
    private string unaJustificacion;
    private bool datosCorrectos = true;
    private string mensajeError;
    private string mensajeErrorSinFormato;
    private string unFormato;
    private bool reporteGenerado = false;
    private string mensajeReporteGenerado;

    protected override void OnInitialized()
    {
        try
        {
            reservasRegistradas = Controller.ListarTodasLasReservas().ToList();
        }
        catch (DatabaseExceptionController e)
        {
            NavigationManager.NavigateTo("/ErrorBD");
        }
    }

    private void RechazarReserva(DTOReserva reserva)
    {
        reserva.Estado = "Rechazada";
        Controller.RechazarReserva(reserva);
        reservasRegistradas = Controller.ListarTodasLasReservas().ToList();

    }

    private void AceptarReserva(DTOReserva reserva)
    {
        try
        {
            Controller.AceptarReserva(reserva);
            reserva.Estado = "Aprobada";
            reservasRegistradas = Controller.ListarTodasLasReservas().ToList();
        }
        catch (DatabaseExceptionController e)
        {
            NavigationManager.NavigateTo("/ErrorBD");
        }
        catch (Exception e)
        {
            datosCorrectos = false;
            mensajeError = e.Message;
        }
    }
    private void MostrarJustificacion(DTOReserva reserva)
    {
        reservaRechazada = true;
    }

    private void GuardarRechazo(DTOReserva reserva)
    {
        try
        {
            if (unaJustificacion == null)
            {
                throw new Exception("Falta justificacion");    
            }
            Controller.RechazarReserva(reserva);
            reserva.Estado = "Rechazada";
            Controller.justificacionRechazo(unaJustificacion, reserva);
        }
        catch (DatabaseExceptionController e)
        {
            NavigationManager.NavigateTo("/ErrorBD");
        }
        catch (Exception e)
        {
            datosCorrectos = false;
            mensajeError = e.Message;
        }

    }

    private void GenerarReporte()
    {
        datosCorrectos = true;
        reporteGenerado = false;
        mensajeErrorSinFormato = string.Empty;
        mensajeReporteGenerado = string.Empty;

        if (string.IsNullOrEmpty(unFormato) || unFormato == "Seleccione un formato")
        {
            mensajeErrorSinFormato = "Seleccione un formato para el reporte";
            datosCorrectos = false;
        }
        else
        {
            try
            {
                Controller.GenerarReporteReservas(unFormato);
                reporteGenerado = true;
                mensajeReporteGenerado = "Reporte generado correctamente, lo puede ver en la carpeta Reportes";
            }
            catch (DatabaseExceptionController e)
            {
                NavigationManager.NavigateTo("/ErrorBD");
            }
            catch (Exception e)
            {
                datosCorrectos = false;
                mensajeError = e.Message;
            }
        }
    }
}
