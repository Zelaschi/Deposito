@page "/reserva/crear"

<PageTitle>Crear Reserva</PageTitle>

@using BusinessLogic
@using Domain
@using ControllerLayer

@inject Controller Controller
@inject NavigationManager NavigationManager

<h1>Crear Reserva</h1>
<form>
    <div class="form-group">
        <label for="fechaDesde">Fecha Desde</label>
        <input type="datetime" class="form-control" id="fechaDesde" @bind="unaFechaDesde" />
    </div>
    <div class="form-group">
        <label for="fechaHasta">Fecha Hasta</label>
        <input type="datetime" class="form-control" id="fechaHasta" @bind="unaFechaHasta" />
    </div>
    <div class="form-group">
        <label for="Deposito">Deposito</label>
        <select class="form-control" value="@_idDepositoSeleccionado">
            <option diable selected value="">Seleccionar Deposito</option>
            @foreach(var deposito in depositosDisponibles)
            {
                <option value="@deposito.Id" selected="@(deposito.Id==_idDepositoSeleccionado)">
                    @deposito.Id
                </option>
            }
        </select>
    </div>
    <div class="form-group">
        <label for="Deposito">Deposito</label>
        <select class="form-control" value="@_mailClienteSeleccionado">
            <option diable selected value="">Seleccionar Deposito</option>
            @foreach (var cliente in clientesDisponibles)
            {
                <option value="@cliente.Mail" selected="@(cliente.Mail==_mailClienteSeleccionado)">
                    @cliente.Mail
                </option>
            }
        </select>
    </div>

    <button type="button" class="btn btn-primary" @onclick="GuardarCambios">Guardar cambios</button>
</form>

@if (!datosCorrectos)
{
    <p class="text-danger">@mensajeError</p>
}

@code {
    private DTOReserva reserva;
    private DateTime unaFechaDesde;
    private DateTime unaFechaHasta;
    private DTODeposito unDeposito;
    private DTOCliente unCliente;
    private int precio;
    private DTOCliente cliente;
    private List<DTODeposito> depositosDisponibles;
    private List<DTOCliente> clientesDisponibles;
    private int _idDepositoSeleccionado;
    private string _mailClienteSeleccionado;
    private bool datosCorrectos = true;
    private string mensajeError;

    protected override void OnInitialized()
    {
        depositosDisponibles = Controller.listarTodosLosDepositos().ToList();

    }

    private void GuardarCambios()
    {
        try
        {
            unDeposito = Controller.BuscarDepositoPorId(_idDepositoSeleccionado);
            unCliente = Controller.buscarClientePorMail(_mailClienteSeleccionado);
            reserva = new(1, unaFechaDesde, unaFechaHasta, unDeposito, unCliente);
        }
        catch (Exception e)
        {
            datosCorrectos = false;
            mensajeError = e.Message;
        }
    }

}
